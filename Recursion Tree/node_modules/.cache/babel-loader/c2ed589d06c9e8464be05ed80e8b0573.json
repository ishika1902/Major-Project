{"ast":null,"code":"var _jsxFileName = \"D:\\\\Major\\\\Recursion Tree\\\\src\\\\primeComponents\\\\seive.jsx\";\nimport React, { Component } from 'react';\nimport Cells from \"./cells\";\nimport Navbar from \"./navbar\";\nimport DiscreteSlider from \"./slider\";\nimport Menu from \"./menu\";\nimport { seive } from \"../algorithms/prime\";\nimport Spiral from \"./spiral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Seive extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      number: 100,\n      cells: [],\n      isRunning: false,\n      speed: 500,\n      primes: [],\n      maxPrime: 0,\n      algo: 0\n    };\n\n    this.setAlgo = (pos, val) => {\n      if (pos === 0) {\n        this.setState({\n          algo: val\n        }); // console.log(this.state.algo);\n      }\n    };\n\n    this.changeSpeed = speed => {\n      //console.log(typeof speed);\n      this.setState({\n        speed: 600 - speed * 10\n      });\n    };\n\n    this.handleValueIncease = value => {\n      this.setState({\n        number: value\n      });\n\n      if (this.state.algo === 0) {\n        this.setState({\n          cells: getCells(value),\n          isRunning: false\n        });\n      } // console.log(value);\n\n    };\n\n    this.handleRefresh = () => {\n      this.setState({\n        cells: getCells(this.state.number),\n        isRunning: false\n      });\n    };\n\n    this.startAlgo = () => {\n      console.log(this.state.algo);\n\n      if (this.state.algo === 0) {\n        this.startSeive();\n      } else if (this.state.algo === 1) {\n        this.startSpiral();\n      }\n    };\n\n    this.startSpiral = async () => {\n      let pprimes = seive(this.state.number * 100);\n      let primes = [];\n      this.setState({\n        primes: [],\n        maxPrime: pprimes[pprimes.length - 1]\n      });\n      let mod = Math.ceil(this.state.number / 10);\n\n      for (let i = 0; i < pprimes.length; i++) {\n        primes.push(pprimes[i]);\n\n        if (i % mod === 0) {\n          this.setState({\n            primes\n          });\n          await sleep(10);\n        }\n      }\n\n      console.log('done');\n    };\n\n    this.startSeive = async () => {\n      const speed = this.state.speed;\n      this.setState({\n        isRunning: true\n      });\n      const prime = [];\n\n      for (let i = 0; i <= this.state.number; i++) {\n        prime.push(1);\n      }\n\n      prime[0] = prime[1] = 0;\n      let changedCells = this.state.cells;\n      let prevCheck = -1;\n      let counter = 0;\n\n      for (let i = 2; i <= this.state.number; i++) {\n        if (prime[i] === 1) {\n          //   setTimeout(()=>{\n          changedCells = getNewCellPrimeToggled(changedCells, i - 1);\n          this.setState({\n            cells: changedCells\n          }); //},counter*speed);\n\n          await sleep(this.state.speed);\n          counter++;\n\n          for (let j = i * i; j <= this.state.number; j += i) {\n            //setTimeout(()=>{\n            if (prevCheck != -1) {\n              changedCells = getNewCellVisitingToggled(changedCells, prevCheck);\n            }\n\n            prevCheck = j - 1;\n            changedCells = getNewCellCheckToggled(changedCells, j - 1);\n            changedCells = getNewCellVisitingToggled(changedCells, prevCheck);\n            this.setState({\n              cells: changedCells\n            }); //  },counter*speed);\n\n            await sleep(this.state.speed);\n            counter++;\n            prime[j] = 0;\n          }\n        }\n      } //  setTimeout(()=>{\n\n\n      changedCells = getNewCellVisitingToggled(changedCells, prevCheck);\n      this.setState({\n        cells: changedCells,\n        isRunning: false\n      }); // },counter*speed);\n    };\n  }\n\n  componentDidMount() {\n    const cells = getCells(this.state.number);\n    this.setState({\n      cells\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        onChangeSpeed: this.changeSpeed,\n        onChangeValues: this.handleValueIncease,\n        onVisualize: this.startAlgo,\n        onRefresh: this.handleRefresh,\n        isDisabled: this.state.isRunning,\n        setAlgo: this.setAlgo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), this.state.algo === 0 && /*#__PURE__*/_jsxDEV(Cells, {\n        num: this.state.number,\n        cells: this.state.cells\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), this.state.algo === 1 && /*#__PURE__*/_jsxDEV(Spiral, {\n        num: this.state.number,\n        primes: this.state.primes,\n        maxPrime: this.state.maxPrime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst getNewCellPrimeToggled = (cells, pos) => {\n  const newCells = cells.slice();\n  const cell = newCells[pos];\n  const newCell = { ...cell,\n    isPrime: true\n  };\n  newCells[pos] = newCell;\n  return newCells;\n};\n\nconst getNewCellVisitingToggled = (cells, pos) => {\n  const newCells = cells.slice();\n  const cell = newCells[pos];\n  const newCell = { ...cell,\n    isVisiting: !cell.isVisiting\n  };\n  newCells[pos] = newCell;\n  return newCells;\n};\n\nconst getNewCellCheckToggled = (cells, pos) => {\n  const newCells = cells.slice();\n  const cell = newCells[pos];\n  const newCell = { ...cell,\n    isChecking: true\n  };\n  newCells[pos] = newCell;\n  return newCells;\n};\n\nconst getCells = rows => {\n  const cells = [];\n\n  for (let cell = 1; cell <= rows; cell++) {\n    cells.push(createCell(cell));\n  }\n\n  return cells;\n};\n\nconst createCell = val => {\n  return {\n    val,\n    isChecking: false,\n    isVisiting: false,\n    isPrime: false\n  };\n};\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport default Seive;","map":{"version":3,"names":["React","Component","Cells","Navbar","DiscreteSlider","Menu","seive","Spiral","Seive","constructor","props","state","number","cells","isRunning","speed","primes","maxPrime","algo","setAlgo","pos","val","setState","changeSpeed","handleValueIncease","value","getCells","handleRefresh","startAlgo","console","log","startSeive","startSpiral","pprimes","length","mod","Math","ceil","i","push","sleep","prime","changedCells","prevCheck","counter","getNewCellPrimeToggled","j","getNewCellVisitingToggled","getNewCellCheckToggled","componentDidMount","render","newCells","slice","cell","newCell","isPrime","isVisiting","isChecking","rows","createCell","ms","Promise","resolve","setTimeout"],"sources":["D:/Major/Recursion Tree/src/primeComponents/seive.jsx"],"sourcesContent":["import React, {Component} from 'react';\nimport Cells from \"./cells\";\nimport Navbar from \"./navbar\";\nimport DiscreteSlider from \"./slider\";\nimport Menu from \"./menu\";\nimport {seive} from \"../algorithms/prime\";\nimport Spiral from \"./spiral\";\n\nclass Seive extends Component {\n    state = {\n        number: 100,\n        cells:[],\n        isRunning:false,\n        speed:500,\n        primes:[],\n        maxPrime:0,\n        algo:0\n    }\n\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const cells = getCells(this.state.number);\n        this.setState({cells});\n    }\n    setAlgo = (pos, val) => {\n        if (pos === 0) {\n\n            this.setState({algo: val});\n            // console.log(this.state.algo);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar/>\n                <Menu\n                    onChangeSpeed={this.changeSpeed}\n                    onChangeValues={this.handleValueIncease}\n                    onVisualize = {this.startAlgo}\n                    onRefresh = {this.handleRefresh}\n                    isDisabled = {this.state.isRunning}\n                    setAlgo={this.setAlgo}\n                />\n                {this.state.algo === 0 &&\n                    <Cells\n                        num={this.state.number}\n                        cells={this.state.cells}\n                    />\n                }\n                {this.state.algo === 1 &&\n                    <Spiral\n                        num={this.state.number}\n                        primes={this.state.primes}\n                        maxPrime={this.state.maxPrime}\n                    />\n                }\n\n            </div>\n        );\n    }\n\n    changeSpeed = (speed) => {\n        //console.log(typeof speed);\n        this.setState({speed:600-speed*10});\n    }\n    handleValueIncease = (value) => {\n        this.setState({number:value});\n        if( this.state.algo === 0 ){\n            this.setState({cells:getCells(value),isRunning:false});\n\n        }\n        // console.log(value);\n    }\n    handleRefresh = () => {\n        this.setState({cells:getCells(this.state.number),isRunning:false});\n    }\n\n    startAlgo = () =>{\n        console.log(this.state.algo);\n        if( this.state.algo === 0 ){\n            this.startSeive();\n        }else if( this.state.algo === 1 ){\n            this.startSpiral();\n        }\n    }\n    startSpiral = async () =>{\n        let pprimes = seive(this.state.number*100);\n        let primes = [];\n        this.setState({primes:[],maxPrime:pprimes[pprimes.length-1]});\n        let mod = Math.ceil(this.state.number/10);\n        for(let i=0;i<pprimes.length;i++){\n            primes.push(pprimes[i]);\n\n            if( i%mod === 0 ){\n                this.setState({primes});\n                await sleep(10);\n            }\n        }\n        console.log('done');\n    }\n    startSeive = async () => {\n        const speed = this.state.speed;\n        this.setState({isRunning:true});\n        const prime = [];\n        for(let i = 0;i<=this.state.number;i++){\n            prime.push(1);\n        }\n        prime[0] = prime[1] = 0;\n        let changedCells = this.state.cells;\n        let prevCheck = -1;\n        let counter = 0;\n        for( let i = 2; i<=this.state.number;i++){\n            if( prime[i] === 1 ){\n             //   setTimeout(()=>{\n                    changedCells = getNewCellPrimeToggled(changedCells,i-1);\n                    this.setState({cells:changedCells});\n                //},counter*speed);\n                await sleep(this.state.speed);\n                counter++;\n                for(let j = i*i;j<=this.state.number;j+=i){\n                    //setTimeout(()=>{\n                        if( prevCheck!=-1 ){\n                            changedCells = getNewCellVisitingToggled(changedCells,prevCheck);\n                        }\n                        prevCheck = j-1;\n                        changedCells = getNewCellCheckToggled(changedCells,j-1);\n                        changedCells = getNewCellVisitingToggled(changedCells,prevCheck);\n                        this.setState({cells:changedCells});\n                  //  },counter*speed);\n                    await sleep(this.state.speed);\n                    counter++;\n                    prime[j] = 0;\n                }\n            }\n        }\n      //  setTimeout(()=>{\n            changedCells = getNewCellVisitingToggled(changedCells,prevCheck);\n            this.setState({cells:changedCells,isRunning:false});\n       // },counter*speed);\n    }\n}\n\nconst getNewCellPrimeToggled = (cells,pos) =>{\n    const newCells = cells.slice();\n    const cell = newCells[pos];\n    const newCell = {\n        ...cell,\n        isPrime:true\n    }\n    newCells[pos] = newCell;\n    return newCells;\n}\n\nconst getNewCellVisitingToggled = (cells,pos)=>{\n    const newCells = cells.slice();\n    const cell = newCells[pos];\n    const newCell = {\n        ...cell,\n        isVisiting:!cell.isVisiting\n    }\n    newCells[pos] = newCell;\n    return newCells;\n}\n\nconst getNewCellCheckToggled = (cells,pos) =>{\n    const newCells = cells.slice();\n    const cell = newCells[pos];\n    const newCell = {\n        ...cell,\n        isChecking:true\n    }\n    newCells[pos] = newCell;\n    return newCells;\n}\n\nconst getCells = (rows)=>{\n    const cells = [];\n    for(let cell = 1;cell<=rows;cell++){\n        cells.push(createCell(cell))\n    }\n    return cells;\n}\nconst createCell = (val)=>{\n    return {\n        val,\n        isChecking:false,\n        isVisiting:false,\n        isPrime:false\n    };\n}\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\nexport default Seive;"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,cAAP,MAA2B,UAA3B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAQC,KAAR,QAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,MAAMC,KAAN,SAAoBP,SAApB,CAA8B;EAW1BQ,WAAW,CAACC,KAAD,EAAQ;IACf,MAAMA,KAAN;IADe,KAVnBC,KAUmB,GAVX;MACJC,MAAM,EAAE,GADJ;MAEJC,KAAK,EAAC,EAFF;MAGJC,SAAS,EAAC,KAHN;MAIJC,KAAK,EAAC,GAJF;MAKJC,MAAM,EAAC,EALH;MAMJC,QAAQ,EAAC,CANL;MAOJC,IAAI,EAAC;IAPD,CAUW;;IAAA,KAOnBC,OAPmB,GAOT,CAACC,GAAD,EAAMC,GAAN,KAAc;MACpB,IAAID,GAAG,KAAK,CAAZ,EAAe;QAEX,KAAKE,QAAL,CAAc;UAACJ,IAAI,EAAEG;QAAP,CAAd,EAFW,CAGX;MACH;IACJ,CAbkB;;IAAA,KA6CnBE,WA7CmB,GA6CJR,KAAD,IAAW;MACrB;MACA,KAAKO,QAAL,CAAc;QAACP,KAAK,EAAC,MAAIA,KAAK,GAAC;MAAjB,CAAd;IACH,CAhDkB;;IAAA,KAiDnBS,kBAjDmB,GAiDGC,KAAD,IAAW;MAC5B,KAAKH,QAAL,CAAc;QAACV,MAAM,EAACa;MAAR,CAAd;;MACA,IAAI,KAAKd,KAAL,CAAWO,IAAX,KAAoB,CAAxB,EAA2B;QACvB,KAAKI,QAAL,CAAc;UAACT,KAAK,EAACa,QAAQ,CAACD,KAAD,CAAf;UAAuBX,SAAS,EAAC;QAAjC,CAAd;MAEH,CAL2B,CAM5B;;IACH,CAxDkB;;IAAA,KAyDnBa,aAzDmB,GAyDH,MAAM;MAClB,KAAKL,QAAL,CAAc;QAACT,KAAK,EAACa,QAAQ,CAAC,KAAKf,KAAL,CAAWC,MAAZ,CAAf;QAAmCE,SAAS,EAAC;MAA7C,CAAd;IACH,CA3DkB;;IAAA,KA6DnBc,SA7DmB,GA6DP,MAAK;MACbC,OAAO,CAACC,GAAR,CAAY,KAAKnB,KAAL,CAAWO,IAAvB;;MACA,IAAI,KAAKP,KAAL,CAAWO,IAAX,KAAoB,CAAxB,EAA2B;QACvB,KAAKa,UAAL;MACH,CAFD,MAEM,IAAI,KAAKpB,KAAL,CAAWO,IAAX,KAAoB,CAAxB,EAA2B;QAC7B,KAAKc,WAAL;MACH;IACJ,CApEkB;;IAAA,KAqEnBA,WArEmB,GAqEL,YAAW;MACrB,IAAIC,OAAO,GAAG3B,KAAK,CAAC,KAAKK,KAAL,CAAWC,MAAX,GAAkB,GAAnB,CAAnB;MACA,IAAII,MAAM,GAAG,EAAb;MACA,KAAKM,QAAL,CAAc;QAACN,MAAM,EAAC,EAAR;QAAWC,QAAQ,EAACgB,OAAO,CAACA,OAAO,CAACC,MAAR,GAAe,CAAhB;MAA3B,CAAd;MACA,IAAIC,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAU,KAAK1B,KAAL,CAAWC,MAAX,GAAkB,EAA5B,CAAV;;MACA,KAAI,IAAI0B,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACL,OAAO,CAACC,MAAtB,EAA6BI,CAAC,EAA9B,EAAiC;QAC7BtB,MAAM,CAACuB,IAAP,CAAYN,OAAO,CAACK,CAAD,CAAnB;;QAEA,IAAIA,CAAC,GAACH,GAAF,KAAU,CAAd,EAAiB;UACb,KAAKb,QAAL,CAAc;YAACN;UAAD,CAAd;UACA,MAAMwB,KAAK,CAAC,EAAD,CAAX;QACH;MACJ;;MACDX,OAAO,CAACC,GAAR,CAAY,MAAZ;IACH,CAnFkB;;IAAA,KAoFnBC,UApFmB,GAoFN,YAAY;MACrB,MAAMhB,KAAK,GAAG,KAAKJ,KAAL,CAAWI,KAAzB;MACA,KAAKO,QAAL,CAAc;QAACR,SAAS,EAAC;MAAX,CAAd;MACA,MAAM2B,KAAK,GAAG,EAAd;;MACA,KAAI,IAAIH,CAAC,GAAG,CAAZ,EAAcA,CAAC,IAAE,KAAK3B,KAAL,CAAWC,MAA5B,EAAmC0B,CAAC,EAApC,EAAuC;QACnCG,KAAK,CAACF,IAAN,CAAW,CAAX;MACH;;MACDE,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAtB;MACA,IAAIC,YAAY,GAAG,KAAK/B,KAAL,CAAWE,KAA9B;MACA,IAAI8B,SAAS,GAAG,CAAC,CAAjB;MACA,IAAIC,OAAO,GAAG,CAAd;;MACA,KAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAE,KAAK3B,KAAL,CAAWC,MAA9B,EAAqC0B,CAAC,EAAtC,EAAyC;QACrC,IAAIG,KAAK,CAACH,CAAD,CAAL,KAAa,CAAjB,EAAoB;UACnB;UACOI,YAAY,GAAGG,sBAAsB,CAACH,YAAD,EAAcJ,CAAC,GAAC,CAAhB,CAArC;UACA,KAAKhB,QAAL,CAAc;YAACT,KAAK,EAAC6B;UAAP,CAAd,EAHY,CAIhB;;UACA,MAAMF,KAAK,CAAC,KAAK7B,KAAL,CAAWI,KAAZ,CAAX;UACA6B,OAAO;;UACP,KAAI,IAAIE,CAAC,GAAGR,CAAC,GAACA,CAAd,EAAgBQ,CAAC,IAAE,KAAKnC,KAAL,CAAWC,MAA9B,EAAqCkC,CAAC,IAAER,CAAxC,EAA0C;YACtC;YACI,IAAIK,SAAS,IAAE,CAAC,CAAhB,EAAmB;cACfD,YAAY,GAAGK,yBAAyB,CAACL,YAAD,EAAcC,SAAd,CAAxC;YACH;;YACDA,SAAS,GAAGG,CAAC,GAAC,CAAd;YACAJ,YAAY,GAAGM,sBAAsB,CAACN,YAAD,EAAcI,CAAC,GAAC,CAAhB,CAArC;YACAJ,YAAY,GAAGK,yBAAyB,CAACL,YAAD,EAAcC,SAAd,CAAxC;YACA,KAAKrB,QAAL,CAAc;cAACT,KAAK,EAAC6B;YAAP,CAAd,EARkC,CASxC;;YACE,MAAMF,KAAK,CAAC,KAAK7B,KAAL,CAAWI,KAAZ,CAAX;YACA6B,OAAO;YACPH,KAAK,CAACK,CAAD,CAAL,GAAW,CAAX;UACH;QACJ;MACJ,CAlCoB,CAmCvB;;;MACMJ,YAAY,GAAGK,yBAAyB,CAACL,YAAD,EAAcC,SAAd,CAAxC;MACA,KAAKrB,QAAL,CAAc;QAACT,KAAK,EAAC6B,YAAP;QAAoB5B,SAAS,EAAC;MAA9B,CAAd,EArCiB,CAsCtB;IACF,CA3HkB;EAElB;;EACDmC,iBAAiB,GAAG;IAChB,MAAMpC,KAAK,GAAGa,QAAQ,CAAC,KAAKf,KAAL,CAAWC,MAAZ,CAAtB;IACA,KAAKU,QAAL,CAAc;MAACT;IAAD,CAAd;EACH;;EASDqC,MAAM,GAAG;IACL,oBACI;MAAA,wBACI,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,IAAD;QACI,aAAa,EAAE,KAAK3B,WADxB;QAEI,cAAc,EAAE,KAAKC,kBAFzB;QAGI,WAAW,EAAI,KAAKI,SAHxB;QAII,SAAS,EAAI,KAAKD,aAJtB;QAKI,UAAU,EAAI,KAAKhB,KAAL,CAAWG,SAL7B;QAMI,OAAO,EAAE,KAAKK;MANlB;QAAA;QAAA;QAAA;MAAA,QAFJ,EAUK,KAAKR,KAAL,CAAWO,IAAX,KAAoB,CAApB,iBACG,QAAC,KAAD;QACI,GAAG,EAAE,KAAKP,KAAL,CAAWC,MADpB;QAEI,KAAK,EAAE,KAAKD,KAAL,CAAWE;MAFtB;QAAA;QAAA;QAAA;MAAA,QAXR,EAgBK,KAAKF,KAAL,CAAWO,IAAX,KAAoB,CAApB,iBACG,QAAC,MAAD;QACI,GAAG,EAAE,KAAKP,KAAL,CAAWC,MADpB;QAEI,MAAM,EAAE,KAAKD,KAAL,CAAWK,MAFvB;QAGI,QAAQ,EAAE,KAAKL,KAAL,CAAWM;MAHzB;QAAA;QAAA;QAAA;MAAA,QAjBR;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EA2BH;;AAtDyB;;AAyI9B,MAAM4B,sBAAsB,GAAG,CAAChC,KAAD,EAAOO,GAAP,KAAc;EACzC,MAAM+B,QAAQ,GAAGtC,KAAK,CAACuC,KAAN,EAAjB;EACA,MAAMC,IAAI,GAAGF,QAAQ,CAAC/B,GAAD,CAArB;EACA,MAAMkC,OAAO,GAAG,EACZ,GAAGD,IADS;IAEZE,OAAO,EAAC;EAFI,CAAhB;EAIAJ,QAAQ,CAAC/B,GAAD,CAAR,GAAgBkC,OAAhB;EACA,OAAOH,QAAP;AACH,CATD;;AAWA,MAAMJ,yBAAyB,GAAG,CAAClC,KAAD,EAAOO,GAAP,KAAa;EAC3C,MAAM+B,QAAQ,GAAGtC,KAAK,CAACuC,KAAN,EAAjB;EACA,MAAMC,IAAI,GAAGF,QAAQ,CAAC/B,GAAD,CAArB;EACA,MAAMkC,OAAO,GAAG,EACZ,GAAGD,IADS;IAEZG,UAAU,EAAC,CAACH,IAAI,CAACG;EAFL,CAAhB;EAIAL,QAAQ,CAAC/B,GAAD,CAAR,GAAgBkC,OAAhB;EACA,OAAOH,QAAP;AACH,CATD;;AAWA,MAAMH,sBAAsB,GAAG,CAACnC,KAAD,EAAOO,GAAP,KAAc;EACzC,MAAM+B,QAAQ,GAAGtC,KAAK,CAACuC,KAAN,EAAjB;EACA,MAAMC,IAAI,GAAGF,QAAQ,CAAC/B,GAAD,CAArB;EACA,MAAMkC,OAAO,GAAG,EACZ,GAAGD,IADS;IAEZI,UAAU,EAAC;EAFC,CAAhB;EAIAN,QAAQ,CAAC/B,GAAD,CAAR,GAAgBkC,OAAhB;EACA,OAAOH,QAAP;AACH,CATD;;AAWA,MAAMzB,QAAQ,GAAIgC,IAAD,IAAQ;EACrB,MAAM7C,KAAK,GAAG,EAAd;;EACA,KAAI,IAAIwC,IAAI,GAAG,CAAf,EAAiBA,IAAI,IAAEK,IAAvB,EAA4BL,IAAI,EAAhC,EAAmC;IAC/BxC,KAAK,CAAC0B,IAAN,CAAWoB,UAAU,CAACN,IAAD,CAArB;EACH;;EACD,OAAOxC,KAAP;AACH,CAND;;AAOA,MAAM8C,UAAU,GAAItC,GAAD,IAAO;EACtB,OAAO;IACHA,GADG;IAEHoC,UAAU,EAAC,KAFR;IAGHD,UAAU,EAAC,KAHR;IAIHD,OAAO,EAAC;EAJL,CAAP;AAMH,CAPD;;AAQA,SAASf,KAAT,CAAeoB,EAAf,EAAmB;EACf,OAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAAP;AACH;;AACD,eAAepD,KAAf"},"metadata":{},"sourceType":"module"}