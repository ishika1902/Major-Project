{"ast":null,"code":"export function randomMaze(board, row, col) {\n  let newBoard = board.slice();\n  const pairs = [];\n\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      const random = Math.floor(Math.random() * 100) + 10;\n\n      if (random % 4 === 0) {\n        newBoard[i][j].isWall = true;\n        pairs.push({\n          xx: i,\n          yy: j\n        });\n      }\n    }\n  }\n\n  return pairs;\n}","map":{"version":3,"names":["randomMaze","board","row","col","newBoard","slice","pairs","i","j","random","Math","floor","isWall","push","xx","yy"],"sources":["D:/Major/Recursion Tree/src/algorithms/randomMaze.js"],"sourcesContent":["export function randomMaze(board,row,col){\n    let newBoard = board.slice();\n    const pairs = [];\n    for(let i = 0;i<row;i++){\n        for( let j = 0;j <col;j++){\n            const random = Math.floor(Math.random()*100)+10;\n            if( random%4 === 0 ){\n                newBoard[i][j].isWall = true;\n                pairs.push({\n                    xx:i,\n                    yy:j\n                });\n            }\n        }\n    }\n    return pairs;\n}"],"mappings":"AAAA,OAAO,SAASA,UAAT,CAAoBC,KAApB,EAA0BC,GAA1B,EAA8BC,GAA9B,EAAkC;EACrC,IAAIC,QAAQ,GAAGH,KAAK,CAACI,KAAN,EAAf;EACA,MAAMC,KAAK,GAAG,EAAd;;EACA,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAcA,CAAC,GAACL,GAAhB,EAAoBK,CAAC,EAArB,EAAwB;IACpB,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAeA,CAAC,GAAEL,GAAlB,EAAsBK,CAAC,EAAvB,EAA0B;MACtB,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAc,GAAzB,IAA8B,EAA7C;;MACA,IAAIA,MAAM,GAAC,CAAP,KAAa,CAAjB,EAAoB;QAChBL,QAAQ,CAACG,CAAD,CAAR,CAAYC,CAAZ,EAAeI,MAAf,GAAwB,IAAxB;QACAN,KAAK,CAACO,IAAN,CAAW;UACPC,EAAE,EAACP,CADI;UAEPQ,EAAE,EAACP;QAFI,CAAX;MAIH;IACJ;EACJ;;EACD,OAAOF,KAAP;AACH"},"metadata":{},"sourceType":"module"}