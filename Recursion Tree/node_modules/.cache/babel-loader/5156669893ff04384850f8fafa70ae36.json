{"ast":null,"code":"export function getMaze(board, row, col) {\n  const pairs = [];\n  let newBoard = board.slice();\n\n  for (let i = 0; i < col; i++) {\n    newBoard[0][i].isWall = true;\n    pairs.push({\n      xx: 0,\n      yy: i\n    });\n  }\n\n  for (let i = 0; i < row; i++) {\n    newBoard[i][col - 1].isWall = true;\n    pairs.push({\n      xx: i,\n      yy: col - 1\n    });\n  }\n\n  for (let i = col - 1; i >= 0; i--) {\n    newBoard[row - 1][i].isWall = true;\n    pairs.push({\n      xx: row - 1,\n      yy: i\n    });\n  }\n\n  for (let i = row - 1; i >= 0; i--) {\n    newBoard[i][0].isWall = true;\n    pairs.push({\n      xx: i,\n      yy: 0\n    });\n  }\n\n  decideMaze(pairs, newBoard, 1, row - 2, 1, col - 2); //console.log(\"here\");\n\n  return pairs;\n}\nlet val = 0;\n\nfunction decideMaze(pairs, board, startRow, endRow, startCol, endCol) {\n  //console.log(\"count\");\n  val++;\n\n  if (endRow - startRow <= 1 && endCol - startCol <= 1) {\n    return;\n  }\n\n  if (endCol - startCol > endRow - startRow) {\n    recursiveMazeVertical(pairs, board, startRow, endRow, startCol, endCol);\n  } else {\n    recursiveMazeHorizontal(pairs, board, startRow, endRow, startCol, endCol);\n  }\n}\n\nfunction recursiveMazeVertical(pairs, board, startRow, endRow, startCol, endCol) {\n  let mid = Math.floor((endCol + startCol) / 2);\n  let random = Math.floor(Math.random() * (endRow - startRow + 1)) + startRow; //console.log( \"row \",random,\" \",startRow,\" \",endRow );\n\n  let start = startRow;\n\n  if (!board[startRow - 1][mid].isWall) {\n    random = start;\n    start++;\n  }\n\n  let end = endRow;\n\n  if (!board[endRow + 1][mid].isWall) {\n    random = end;\n    end--;\n  }\n\n  for (let i = start; i <= end; i++) {\n    if (i !== random) {\n      board[i][mid].isWall = true;\n      pairs.push({\n        xx: i,\n        yy: mid\n      });\n    }\n  }\n\n  decideMaze(pairs, board, startRow, endRow, startCol, mid - 1);\n  decideMaze(pairs, board, startRow, endRow, mid + 1, endCol);\n}\n\nfunction recursiveMazeHorizontal(pairs, board, startRow, endRow, startCol, endCol) {\n  let mid = Math.floor((endRow + startRow) / 2); //  console.log(\"mid: \",mid);\n\n  let random = Math.floor(Math.random() * (endCol - startCol + 1)) + startCol;\n  let start = startCol;\n\n  if (!board[mid][startCol - 1].isWall) {\n    random = start;\n    start++;\n  }\n\n  let end = endCol;\n\n  if (!board[mid][endCol + 1].isWall) {\n    random = end;\n    end--;\n  }\n\n  for (let i = start; i <= end; i++) {\n    if (i !== random) {\n      board[mid][i].isWall = true;\n      pairs.push({\n        xx: mid,\n        yy: i\n      });\n    }\n  }\n\n  decideMaze(pairs, board, startRow, mid - 1, startCol, endCol);\n  decideMaze(pairs, board, mid + 1, endRow, startCol, endCol);\n}","map":{"version":3,"names":["getMaze","board","row","col","pairs","newBoard","slice","i","isWall","push","xx","yy","decideMaze","val","startRow","endRow","startCol","endCol","recursiveMazeVertical","recursiveMazeHorizontal","mid","Math","floor","random","start","end"],"sources":["D:/Major/Recursion Tree/src/algorithms/recursiveMaze.js"],"sourcesContent":["export function getMaze(board,row,col){\n    const pairs = [];\n    let newBoard = board.slice();\n    for( let i = 0;i <col;i++){\n        newBoard[0][i].isWall = true;\n        pairs.push({\n            xx:0,\n            yy:i\n        });\n    }\n    for( let i = 0;i <row;i++){\n        newBoard[i][col-1].isWall = true;\n        pairs.push({\n            xx:i,\n            yy:col-1\n        });\n    }\n    for( let i = col-1;i>=0;i-- ){\n        newBoard[row-1][i].isWall = true;\n        pairs.push({\n            xx:row-1,\n            yy:i\n        });\n    }\n    for(let i = row-1;i>=0;i--){\n        newBoard[i][0].isWall = true;\n        pairs.push({\n            xx:i,\n            yy:0\n        });\n    }\n    decideMaze(pairs,newBoard,1,row-2,1,col-2);\n    //console.log(\"here\");\n    return pairs;\n}\nlet val = 0;\n\nfunction decideMaze(pairs,board,startRow,endRow,startCol,endCol) {\n    //console.log(\"count\");\n    val++;\n\n    if( ((endRow-startRow) <=1) && ((endCol - startCol) <=1) ){\n        return;\n    }\n\n     if( (endCol - startCol) > (endRow - startRow) ){\n        recursiveMazeVertical(pairs,board,startRow,endRow,startCol,endCol);\n    } else{\n        recursiveMazeHorizontal(pairs,board,startRow,endRow,startCol,endCol);\n    }\n}\nfunction recursiveMazeVertical(pairs,board,startRow,endRow,startCol,endCol){\n    let mid = Math.floor((endCol+startCol)/2);\n    let random = Math.floor(Math.random() * (endRow-startRow+1)) + startRow;\n    //console.log( \"row \",random,\" \",startRow,\" \",endRow );\n    let start = startRow;\n    if( !board[startRow-1][mid].isWall ){\n        random = start;\n        start++;\n    }\n    let end = endRow;\n    if( !board[endRow+1][mid].isWall ){\n        random = end;\n        end--;\n    }\n    for(let i = start;i<=end;i++){\n        if( i!==random ){\n            board[i][mid].isWall = true;\n            pairs.push({\n                xx:i,\n                yy:mid\n            });\n        }\n    }\n    decideMaze(pairs,board,startRow,endRow,startCol,mid-1);\n    decideMaze(pairs,board,startRow,endRow,mid+1,endCol);\n}\nfunction recursiveMazeHorizontal(pairs,board,startRow,endRow,startCol,endCol){\n    let mid = Math.floor((endRow+startRow)/2);\n  //  console.log(\"mid: \",mid);\n    let random = Math.floor(Math.random() * (endCol-startCol+1)) + startCol;\n    let start = startCol;\n    if( !board[mid][startCol-1].isWall ){\n        random = start;\n        start++;\n    }\n    let end = endCol;\n    if( !board[mid][endCol+1].isWall ){\n        random = end;\n        end--;\n    }\n    for(let i = start;i<=end;i++){\n        if( i!==random ){\n            board[mid][i].isWall = true;\n            pairs.push({\n                xx:mid,\n                yy:i\n            });\n        }\n    }\n    decideMaze(pairs,board,startRow,mid-1,startCol,endCol);\n    decideMaze(pairs,board,mid+1,endRow,startCol,endCol);\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}