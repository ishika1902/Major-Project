{"ast":null,"code":"let values = [];\nexport function quickSort(rects2) {\n  let rects = rects2.slice();\n  values = [];\n  let sz = rects2.length; // console.log( \"fdsfsd\",sz );\n\n  sz = sz - 1;\n  quick(rects, 0, sz);\n\n  for (var i = 0; i <= sz; i++) {\n    values.push({\n      xx: i,\n      yy: i,\n      changed: true\n    });\n  }\n\n  return values;\n}\n\nfunction getPartition(rects, left, right) {\n  let pivot = rects[right].width;\n  let it = left - 1;\n\n  for (var j = left; j <= right - 1; j++) {\n    if (rects[j].width < pivot) {\n      it++;\n\n      if (it !== j) {\n        // swap(rects[it],rects[j];\n        const rect1 = { ...rects[it]\n        };\n        const rect2 = { ...rects[j]\n        };\n        rects[it] = rect2;\n        rects[j] = rect1;\n        values.push({\n          xx: it,\n          yy: j,\n          changed: true\n        });\n      }\n    }\n  }\n\n  if (it + 1 !== right) {\n    const rect1 = { ...rects[it + 1]\n    };\n    const rect2 = { ...rects[right]\n    };\n    rects[it + 1] = rect2;\n    rects[right] = rect1;\n    values.push({\n      xx: it + 1,\n      yy: right,\n      changed: true\n    });\n  }\n\n  return it + 1;\n}\n\nfunction quick(rects, left, right) {\n  if (left >= right) return;\n  const partition = getPartition(rects, left, right);\n  quick(rects, left, partition - 1);\n  quick(rects, partition + 1, right);\n}","map":{"version":3,"names":["values","quickSort","rects2","rects","slice","sz","length","quick","i","push","xx","yy","changed","getPartition","left","right","pivot","width","it","j","rect1","rect2","partition"],"sources":["D:/Major/Recursion Tree/src/algorithms/quickSort.js"],"sourcesContent":["let values = [];\n\nexport function quickSort(rects2){\n    let rects = rects2.slice();\n    values = [];\n    let sz = rects2.length;\n    // console.log( \"fdsfsd\",sz );\n    sz = sz-1;\n    quick(rects,0,sz);\n    for(var i=0;i<=sz;i++){\n        values.push({\n            xx:i,\n            yy:i,\n            changed:true\n        })\n    }\n    return values;\n}\n\n\nfunction getPartition(rects, left, right){\n    let pivot = rects[right].width\n    let it = left-1;\n    for(var j=left;j<=right-1;j++){\n        if( rects[j].width< pivot){\n            it++;\n            if( it!==j ){\n                // swap(rects[it],rects[j];\n                const rect1 = {...rects[it]};\n                const rect2 = {...rects[j]};\n                rects[it] = rect2;\n                rects[j] = rect1;\n                values.push({\n                    xx:it,\n                    yy:j,\n                    changed:true\n                })\n            }\n        }\n    }\n    if( it+1!==right ){\n        const rect1 = {...rects[it+1]};\n        const rect2 = {...rects[right]};\n        rects[it+1] = rect2;\n        rects[right] = rect1;\n        values.push({\n            xx:it+1,\n            yy:right,\n            changed:true\n        })\n    }\n    return it+1;\n}\nfunction quick(rects,left,right){\n    if( left>=right ) return ;\n    const partition = getPartition(rects,left,right);\n    quick(rects,left,partition-1);\n    quick(rects,partition+1,right);\n}"],"mappings":"AAAA,IAAIA,MAAM,GAAG,EAAb;AAEA,OAAO,SAASC,SAAT,CAAmBC,MAAnB,EAA0B;EAC7B,IAAIC,KAAK,GAAGD,MAAM,CAACE,KAAP,EAAZ;EACAJ,MAAM,GAAG,EAAT;EACA,IAAIK,EAAE,GAAGH,MAAM,CAACI,MAAhB,CAH6B,CAI7B;;EACAD,EAAE,GAAGA,EAAE,GAAC,CAAR;EACAE,KAAK,CAACJ,KAAD,EAAO,CAAP,EAASE,EAAT,CAAL;;EACA,KAAI,IAAIG,CAAC,GAAC,CAAV,EAAYA,CAAC,IAAEH,EAAf,EAAkBG,CAAC,EAAnB,EAAsB;IAClBR,MAAM,CAACS,IAAP,CAAY;MACRC,EAAE,EAACF,CADK;MAERG,EAAE,EAACH,CAFK;MAGRI,OAAO,EAAC;IAHA,CAAZ;EAKH;;EACD,OAAOZ,MAAP;AACH;;AAGD,SAASa,YAAT,CAAsBV,KAAtB,EAA6BW,IAA7B,EAAmCC,KAAnC,EAAyC;EACrC,IAAIC,KAAK,GAAGb,KAAK,CAACY,KAAD,CAAL,CAAaE,KAAzB;EACA,IAAIC,EAAE,GAAGJ,IAAI,GAAC,CAAd;;EACA,KAAI,IAAIK,CAAC,GAACL,IAAV,EAAeK,CAAC,IAAEJ,KAAK,GAAC,CAAxB,EAA0BI,CAAC,EAA3B,EAA8B;IAC1B,IAAIhB,KAAK,CAACgB,CAAD,CAAL,CAASF,KAAT,GAAgBD,KAApB,EAA0B;MACtBE,EAAE;;MACF,IAAIA,EAAE,KAAGC,CAAT,EAAY;QACR;QACA,MAAMC,KAAK,GAAG,EAAC,GAAGjB,KAAK,CAACe,EAAD;QAAT,CAAd;QACA,MAAMG,KAAK,GAAG,EAAC,GAAGlB,KAAK,CAACgB,CAAD;QAAT,CAAd;QACAhB,KAAK,CAACe,EAAD,CAAL,GAAYG,KAAZ;QACAlB,KAAK,CAACgB,CAAD,CAAL,GAAWC,KAAX;QACApB,MAAM,CAACS,IAAP,CAAY;UACRC,EAAE,EAACQ,EADK;UAERP,EAAE,EAACQ,CAFK;UAGRP,OAAO,EAAC;QAHA,CAAZ;MAKH;IACJ;EACJ;;EACD,IAAIM,EAAE,GAAC,CAAH,KAAOH,KAAX,EAAkB;IACd,MAAMK,KAAK,GAAG,EAAC,GAAGjB,KAAK,CAACe,EAAE,GAAC,CAAJ;IAAT,CAAd;IACA,MAAMG,KAAK,GAAG,EAAC,GAAGlB,KAAK,CAACY,KAAD;IAAT,CAAd;IACAZ,KAAK,CAACe,EAAE,GAAC,CAAJ,CAAL,GAAcG,KAAd;IACAlB,KAAK,CAACY,KAAD,CAAL,GAAeK,KAAf;IACApB,MAAM,CAACS,IAAP,CAAY;MACRC,EAAE,EAACQ,EAAE,GAAC,CADE;MAERP,EAAE,EAACI,KAFK;MAGRH,OAAO,EAAC;IAHA,CAAZ;EAKH;;EACD,OAAOM,EAAE,GAAC,CAAV;AACH;;AACD,SAASX,KAAT,CAAeJ,KAAf,EAAqBW,IAArB,EAA0BC,KAA1B,EAAgC;EAC5B,IAAID,IAAI,IAAEC,KAAV,EAAkB;EAClB,MAAMO,SAAS,GAAGT,YAAY,CAACV,KAAD,EAAOW,IAAP,EAAYC,KAAZ,CAA9B;EACAR,KAAK,CAACJ,KAAD,EAAOW,IAAP,EAAYQ,SAAS,GAAC,CAAtB,CAAL;EACAf,KAAK,CAACJ,KAAD,EAAOmB,SAAS,GAAC,CAAjB,EAAmBP,KAAnB,CAAL;AACH"},"metadata":{},"sourceType":"module"}