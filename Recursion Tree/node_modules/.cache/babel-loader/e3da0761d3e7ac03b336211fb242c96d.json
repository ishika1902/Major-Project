{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Downloads\\\\VizALgo-master\\\\src\\\\queenComponents\\\\queen.jsx\";\nimport React, { Component } from 'react';\nimport Cells from \"./cells\";\nimport Navbar from \"./navbar\";\nimport Menu from \"./menu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Queen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: [],\n      number: 4,\n      speed: 490,\n      isRunning: false\n    };\n\n    this.handleStop = () => {\n      this.setState({\n        isRunning: false\n      });\n    };\n\n    this.handleSpeedChange = val => {\n      const speed = (100 - val) * 10;\n      this.setState({\n        speed\n      });\n    };\n\n    this.handleQueenChange = number => {\n      this.setState({\n        number\n      });\n      const board = getBoard(this.state.number);\n      this.setState({\n        board\n      });\n    };\n\n    this.handleClear = () => {\n      const board = getBoard(this.state.number);\n      this.setState({\n        board\n      });\n    };\n\n    this.handleTurnOff = () => {\n      const newBoard = turnOffAttack(this.state.board, this.state.number);\n      this.setState({\n        board: newBoard\n      });\n    };\n\n    this.startAlgo = async () => {\n      this.setState({\n        isRunning: true\n      });\n      const newBoard = this.state.board.slice();\n      await this.queensAlgo(newBoard, 0);\n      const newBoard2 = turnOffAttack(this.state.board, this.state.number);\n      this.setState({\n        board: newBoard2,\n        isRunning: false\n      });\n    };\n\n    this.queensAlgo = async (board, col) => {\n      if (col >= this.state.number) {\n        return true;\n      }\n\n      let newBoard = board.slice();\n\n      for (let i = 0; i < this.state.number; i++) {\n        newBoard = turnOffAttack(newBoard, this.state.number);\n        const result = getChecked(newBoard, i, col, this.state.number);\n        newBoard = result[0];\n        this.setState({\n          board: newBoard\n        });\n        await sleep(this.state.speed);\n\n        if (result[1]) {\n          const res = await this.queensAlgo(newBoard, col + 1);\n\n          if (res === true) {\n            return true;\n          }\n\n          newBoard[i][col] = { ...newBoard[i][col],\n            isPresent: true,\n            isCurrent: true\n          };\n          this.setState({\n            board: newBoard\n          });\n          await sleep(this.state.speed);\n          newBoard[i][col] = { ...newBoard[i][col],\n            isPresent: false,\n            isCurrent: false\n          };\n          this.setState({\n            board: newBoard\n          });\n        }\n\n        newBoard[i][col] = { ...newBoard[i][col],\n          isPresent: false,\n          isCurrent: false\n        };\n        newBoard = turnOffAttack(newBoard, this.state.number);\n        this.setState({\n          board: newBoard\n        });\n        await sleep(this.state.speed);\n      }\n\n      return false;\n    };\n  }\n\n  componentDidMount() {\n    const board = getBoard(this.state.number); // board[3][3].isPresent = true;\n\n    this.setState({\n      board\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        onSpeedChange: this.handleSpeedChange,\n        onCountChange: this.handleQueenChange,\n        onViusalize: this.startAlgo,\n        disable: this.state.isRunning,\n        onClear: this.handleClear,\n        onStop: this.handleStop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"Center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Cells, {\n          board: this.state.board\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Queen;\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst turnOffAttack = (board, N) => {\n  const newBoard = board.slice();\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isChecked: false,\n        isAttacked: false,\n        isCurrent: false\n      };\n    }\n  }\n\n  return newBoard;\n};\n\nconst getChecked = (board, row, col, N) => {\n  const newBoard = board.slice();\n  let pos = true; // same col\n\n  for (let i = 0; i < N; i++) {\n    if (newBoard[row][i].isPresent) {\n      newBoard[row][i] = { ...newBoard[row][i],\n        isAttacked: true\n      };\n      pos = false;\n    } else {\n      newBoard[row][i] = { ...newBoard[row][i],\n        isChecked: true\n      };\n    }\n  } // same row\n\n\n  for (let i = 0; i < N; i++) {\n    if (newBoard[i][col].isPresent) {\n      newBoard[i][col] = { ...newBoard[i][col],\n        isAttacked: true\n      };\n      pos = false;\n    } else {\n      newBoard[i][col] = { ...newBoard[i][col],\n        isChecked: true\n      };\n    }\n  }\n\n  for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\n    if (newBoard[i][j].isPresent) {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isAttacked: true\n      };\n      pos = false;\n    } else {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isChecked: true\n      };\n    }\n  }\n\n  for (let i = row, j = col; i < N && j >= 0; i++, j--) {\n    if (newBoard[i][j].isPresent) {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isAttacked: true\n      };\n      pos = false;\n    } else {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isChecked: true\n      };\n    }\n  }\n\n  for (let i = row, j = col; i < N && j < N; i++, j++) {\n    if (newBoard[i][j].isPresent) {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isAttacked: true\n      };\n      pos = false;\n    } else {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isChecked: true\n      };\n    }\n  }\n\n  for (let i = row, j = col; i >= 0 && j < N; i--, j++) {\n    if (newBoard[i][j].isPresent) {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isAttacked: true\n      };\n      pos = false;\n    } else {\n      newBoard[i][j] = { ...newBoard[i][j],\n        isChecked: true\n      };\n    }\n  }\n\n  newBoard[row][col] = { ...newBoard[row][col],\n    isPresent: true,\n    isCurrent: true\n  };\n  return [newBoard, pos];\n};\n\nconst getBoard = N => {\n  const rows = [];\n\n  for (let i = 0; i < N; i++) {\n    const cols = [];\n\n    for (let j = 0; j < N; j++) {\n      cols.push(getCell(i, j));\n    }\n\n    rows.push(cols);\n  }\n\n  return rows;\n};\n\nconst getCell = (row, col) => {\n  return {\n    row,\n    col,\n    isPresent: false,\n    isChecked: false,\n    isAttacked: false,\n    isCurrent: false\n  };\n};","map":{"version":3,"names":["React","Component","Cells","Navbar","Menu","Queen","constructor","props","state","board","number","speed","isRunning","handleStop","setState","handleSpeedChange","val","handleQueenChange","getBoard","handleClear","handleTurnOff","newBoard","turnOffAttack","startAlgo","slice","queensAlgo","newBoard2","col","i","result","getChecked","sleep","res","isPresent","isCurrent","componentDidMount","render","textAlign","ms","Promise","resolve","setTimeout","N","j","isChecked","isAttacked","row","pos","rows","cols","push","getCell"],"sources":["C:/Users/hp/Downloads/VizALgo-master/src/queenComponents/queen.jsx"],"sourcesContent":["import React, {Component} from 'react';\nimport Cells from \"./cells\";\nimport Navbar from \"./navbar\";\nimport Menu from \"./menu\";\n\nclass Queen extends Component {\n    state={\n        board:[],\n        number:4,\n        speed:490,\n        isRunning:false\n    }\n\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const board = getBoard(this.state.number);\n       // board[3][3].isPresent = true;\n        this.setState({board});\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar/>\n                <Menu\n                    onSpeedChange={this.handleSpeedChange}\n                    onCountChange={this.handleQueenChange}\n                    onViusalize={this.startAlgo}\n                    disable={this.state.isRunning}\n                    onClear={this.handleClear}\n                    onStop={this.handleStop}\n                />\n                <div style={{textAlign:\"Center\"}}>\n                    <Cells\n                        board={this.state.board}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    handleStop =() =>{\n        this.setState({isRunning:false});\n    }\n\n    handleSpeedChange = (val)=>{\n        const speed = (100-val)*10;\n        this.setState({speed});\n    }\n    handleQueenChange = (number)=>{\n        this.setState({number});\n        const board = getBoard(this.state.number);\n        this.setState({board});\n    }\n    handleClear = () => {\n        const board = getBoard(this.state.number);\n        this.setState({board});\n    }\n    handleTurnOff =  () => {\n        const newBoard = turnOffAttack(this.state.board,this.state.number);\n        this.setState({board:newBoard});\n    }\n    startAlgo = async ()=>{\n        this.setState({isRunning:true});\n        const newBoard = this.state.board.slice();\n        await this.queensAlgo(newBoard,0);\n        const newBoard2 = turnOffAttack(this.state.board,this.state.number);\n        this.setState({board:newBoard2,isRunning:false});\n    }\n    queensAlgo =  async (board,col) => {\n\n        if( col>=this.state.number ){\n            return true;\n        }\n\n        let newBoard = board.slice();\n        for( let i = 0; i < this.state.number;i++ ){\n\n\n            newBoard = turnOffAttack(newBoard,this.state.number);\n            const result = getChecked(newBoard,i,col,this.state.number);\n            newBoard = result[0];\n\n            this.setState({board:newBoard});\n            await sleep(this.state.speed);\n            if( result[1] ){\n                const res = await this.queensAlgo(newBoard,col+1)\n                if( res === true){\n                    return true;\n                }\n                newBoard[i][col] = {...newBoard[i][col],isPresent:true,isCurrent:true};\n                this.setState({board:newBoard});\n                await sleep(this.state.speed);\n                newBoard[i][col] = {...newBoard[i][col],isPresent:false,isCurrent:false};\n                this.setState({board:newBoard});\n\n            }\n            newBoard[i][col] = {...newBoard[i][col],isPresent:false,isCurrent:false};\n            newBoard = turnOffAttack(newBoard,this.state.number);\n            this.setState({board:newBoard});\n            await sleep(this.state.speed);\n        }\n        return false;\n    }\n\n}\n\nexport default Queen;\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\nconst turnOffAttack = (board,N) =>{\n    const newBoard = board.slice();\n    for( let i = 0;i<N; i++ ){\n        for( let j = 0;j<N;j++ ){\n            newBoard[i][j] = {...newBoard[i][j],isChecked:false, isAttacked:false,isCurrent:false};\n        }\n    }\n    return newBoard;\n}\n\nconst getChecked = (board,row,col,N) =>{\n    const newBoard = board.slice();\n    let pos = true;\n    // same col\n    for( let i = 0;i < N;i++ ){\n        if( newBoard[row][i].isPresent ){\n            newBoard[row][i] = {...newBoard[row][i],isAttacked:true};\n            pos = false;\n        } else{\n            newBoard[row][i] = {...newBoard[row][i],isChecked:true};\n        }\n    }\n    // same row\n    for( let i = 0;i < N;i++ ){\n        if( newBoard[i][col].isPresent ){\n            newBoard[i][col] = {...newBoard[i][col],isAttacked:true};\n            pos = false;\n        } else{\n            newBoard[i][col] = {...newBoard[i][col],isChecked:true};\n        }\n    }\n    for( let i = row,j = col; i >= 0 && j >= 0; i--, j--){\n        if( newBoard[i][j].isPresent ){\n            newBoard[i][j] = {...newBoard[i][j],isAttacked:true};\n            pos = false;\n        } else{\n            newBoard[i][j] = {...newBoard[i][j],isChecked:true};\n        }\n    }\n    for( let i = row,j = col; i <N && j >= 0; i++, j--){\n        if( newBoard[i][j].isPresent ){\n            newBoard[i][j] = {...newBoard[i][j],isAttacked:true};\n            pos = false;\n        } else{\n            newBoard[i][j] = {...newBoard[i][j],isChecked:true};\n        }\n    }\n    for( let i = row,j = col; i <N && j < N; i++, j++){\n        if( newBoard[i][j].isPresent ){\n            newBoard[i][j] = {...newBoard[i][j],isAttacked:true};\n            pos = false;\n        } else{\n            newBoard[i][j] = {...newBoard[i][j],isChecked:true};\n        }\n    }\n    for( let i = row,j = col; i>=0 && j < N; i--, j++){\n        if( newBoard[i][j].isPresent ){\n            newBoard[i][j] = {...newBoard[i][j],isAttacked:true};\n            pos = false;\n        } else{\n            newBoard[i][j] = {...newBoard[i][j],isChecked:true};\n        }\n    }\n\n    newBoard[row][col] = {...newBoard[row][col],isPresent:true,isCurrent:true};\n\n    return [newBoard,pos];\n}\nconst getBoard = (N) =>{\n    const rows = [];\n    for( let i = 0;i<N;i++ ){\n        const cols = [];\n        for(let j =0;j<N;j++){\n            cols.push(getCell(i,j));\n        }\n        rows.push(cols);\n    }\n    return rows;\n}\n\nconst getCell = (row,col)=>{\n    return{\n        row,\n        col,\n        isPresent:false,\n        isChecked:false,\n        isAttacked:false,\n        isCurrent:false\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}