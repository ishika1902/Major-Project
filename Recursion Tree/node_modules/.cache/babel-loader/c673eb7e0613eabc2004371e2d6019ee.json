{"ast":null,"code":"export function bfsdfs(grid, startNode, endNode, algo) {\n  var list = [];\n  const nodesInOrder = [];\n  nodesInOrder.push(startNode);\n  list.push(startNode);\n  startNode.isVisited = true;\n\n  while (!!list.length) {\n    const currentNode = algo === \"bfs\" ? list.shift() : list.pop();\n    nodesInOrder.push(currentNode);\n    if (currentNode === endNode) return nodesInOrder;\n    if (algo === \"dfs\") currentNode.isVisited = true;\n    const nodesToPush = getNeighbours(grid, currentNode);\n\n    for (const node of nodesToPush) {\n      if (algo === \"bfs\") {\n        node.isVisited = true;\n      }\n\n      node.previousNode = currentNode;\n      list.push(node);\n    }\n  }\n\n  return nodesInOrder;\n}\n\nfunction getNeighbours(grid, node) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node; // console.log(node);\n\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited && !neighbor.isWall);\n}","map":{"version":3,"names":["bfsdfs","grid","startNode","endNode","algo","list","nodesInOrder","push","isVisited","length","currentNode","shift","pop","nodesToPush","getNeighbours","node","previousNode","neighbors","col","row","filter","neighbor","isWall"],"sources":["D:/Major/Recursion Tree/src/algorithms/bfs.jsx"],"sourcesContent":["export function bfsdfs(grid,startNode,endNode,algo){\n    var list = [];\n    const nodesInOrder = [];\n    nodesInOrder.push(startNode);\n    list.push(startNode);\n    startNode.isVisited = true;\n    while(!!list.length){\n        const currentNode = (algo === \"bfs\" ? list.shift():list.pop());\n        nodesInOrder.push(currentNode);\n        if( currentNode === endNode ) return nodesInOrder;\n        if( algo === \"dfs\" ) currentNode.isVisited = true;\n        const nodesToPush = getNeighbours(grid,currentNode);\n        for( const node of nodesToPush ){\n            if(algo === \"bfs\"){\n                node.isVisited = true;\n            }\n            node.previousNode = currentNode;\n            list.push(node);\n\n        }\n    }\n    return nodesInOrder;\n}\n\nfunction getNeighbours(grid,node){\n    const neighbors = [];\n    const {col, row} = node;\n   // console.log(node);\n\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => (!neighbor.isVisited && !neighbor.isWall ));\n}"],"mappings":"AAAA,OAAO,SAASA,MAAT,CAAgBC,IAAhB,EAAqBC,SAArB,EAA+BC,OAA/B,EAAuCC,IAAvC,EAA4C;EAC/C,IAAIC,IAAI,GAAG,EAAX;EACA,MAAMC,YAAY,GAAG,EAArB;EACAA,YAAY,CAACC,IAAb,CAAkBL,SAAlB;EACAG,IAAI,CAACE,IAAL,CAAUL,SAAV;EACAA,SAAS,CAACM,SAAV,GAAsB,IAAtB;;EACA,OAAM,CAAC,CAACH,IAAI,CAACI,MAAb,EAAoB;IAChB,MAAMC,WAAW,GAAIN,IAAI,KAAK,KAAT,GAAiBC,IAAI,CAACM,KAAL,EAAjB,GAA8BN,IAAI,CAACO,GAAL,EAAnD;IACAN,YAAY,CAACC,IAAb,CAAkBG,WAAlB;IACA,IAAIA,WAAW,KAAKP,OAApB,EAA8B,OAAOG,YAAP;IAC9B,IAAIF,IAAI,KAAK,KAAb,EAAqBM,WAAW,CAACF,SAAZ,GAAwB,IAAxB;IACrB,MAAMK,WAAW,GAAGC,aAAa,CAACb,IAAD,EAAMS,WAAN,CAAjC;;IACA,KAAK,MAAMK,IAAX,IAAmBF,WAAnB,EAAgC;MAC5B,IAAGT,IAAI,KAAK,KAAZ,EAAkB;QACdW,IAAI,CAACP,SAAL,GAAiB,IAAjB;MACH;;MACDO,IAAI,CAACC,YAAL,GAAoBN,WAApB;MACAL,IAAI,CAACE,IAAL,CAAUQ,IAAV;IAEH;EACJ;;EACD,OAAOT,YAAP;AACH;;AAED,SAASQ,aAAT,CAAuBb,IAAvB,EAA4Bc,IAA5B,EAAiC;EAC7B,MAAME,SAAS,GAAG,EAAlB;EACA,MAAM;IAACC,GAAD;IAAMC;EAAN,IAAaJ,IAAnB,CAF6B,CAG9B;;EAEC,IAAIG,GAAG,GAAG,CAAV,EAAaD,SAAS,CAACV,IAAV,CAAeN,IAAI,CAACkB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;EACb,IAAIC,GAAG,GAAG,CAAV,EAAaF,SAAS,CAACV,IAAV,CAAeN,IAAI,CAACkB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;EACb,IAAIC,GAAG,GAAGlB,IAAI,CAACQ,MAAL,GAAc,CAAxB,EAA2BQ,SAAS,CAACV,IAAV,CAAeN,IAAI,CAACkB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;EAC3B,IAAIA,GAAG,GAAGjB,IAAI,CAAC,CAAD,CAAJ,CAAQQ,MAAR,GAAiB,CAA3B,EAA8BQ,SAAS,CAACV,IAAV,CAAeN,IAAI,CAACkB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;EAC9B,OAAOD,SAAS,CAACG,MAAV,CAAiBC,QAAQ,IAAK,CAACA,QAAQ,CAACb,SAAV,IAAuB,CAACa,QAAQ,CAACC,MAA/D,CAAP;AACH"},"metadata":{},"sourceType":"module"}