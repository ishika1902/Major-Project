{"ast":null,"code":"export function bubbleSort2(rects) {\n  const pairs = [];\n  const num = rects.length;\n  const prevRect = rects.slice();\n\n  for (let i = 0; i < num; i++) {\n    for (let j = i + 1; j < num; j++) {\n      if (prevRect[i].width > prevRect[j].width) {\n        const recti = { ...prevRect[i]\n        };\n        const rectj = { ...prevRect[j]\n        };\n        prevRect[j] = recti;\n        prevRect[i] = rectj;\n        pairs.push({\n          xx: i,\n          yy: j,\n          changed: true\n        });\n      } else {\n        pairs.push({\n          xx: i,\n          yy: j,\n          changed: false\n        });\n      }\n\n      if (j === num - 1) {\n        pairs.push({\n          xx: i,\n          yy: i,\n          changed: false\n        });\n      }\n    }\n  }\n\n  return pairs;\n}\nexport function selectionSort(arr) {\n  const pairs = [];\n  let n = arr.length;\n  const prevRect = arr.slice(); // One by one move boundary of unsorted subarray\n\n  for (let i = 0; i < n - 1; i++) {\n    let min_idx = i;\n\n    for (let j = i + 1; j < n; j++) {\n      pairs.push({\n        xx: min_idx,\n        yy: j,\n        changed: false\n      });\n\n      if (prevRect[j].width < prevRect[min_idx].width) {\n        min_idx = j;\n      }\n    } // Swap the found minimum element with the first\n    // element\n\n\n    const recti = { ...prevRect[i]\n    };\n    const rectj = { ...prevRect[min_idx]\n    };\n    prevRect[min_idx] = recti;\n    prevRect[i] = rectj;\n    pairs.push({\n      xx: min_idx,\n      yy: i,\n      changed: true\n    });\n    pairs.push({\n      xx: i,\n      yy: i,\n      changed: false\n    });\n  }\n\n  pairs.push({\n    xx: n - 1,\n    yy: n - 1,\n    changed: false\n  });\n  return pairs;\n}\nexport function bubbleSort(arr) {\n  const pairs = [];\n  let n = arr.length;\n  const prevRect = arr.slice();\n\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      if (prevRect[j].width > prevRect[j + 1].width) {\n        // swap arr[j+1] and arr[j]\n        const recti = { ...prevRect[j]\n        };\n        const rectj = { ...prevRect[j + 1]\n        };\n        prevRect[j + 1] = recti;\n        prevRect[j] = rectj;\n        pairs.push({\n          xx: j,\n          yy: j + 1,\n          changed: true\n        });\n      } else {\n        pairs.push({\n          xx: j,\n          yy: j + 1,\n          changed: false\n        });\n      }\n\n      if (j === n - i - 2) {\n        pairs.push({\n          xx: n - i - 1,\n          yy: n - i - 1,\n          changed: false\n        });\n      }\n    }\n  }\n\n  pairs.push({\n    xx: 0,\n    yy: 0,\n    changed: false\n  });\n  return pairs;\n}\nexport function insertionSort(arr) {\n  const pairs = [];\n  let n = arr.length;\n  const prevRect = arr.slice();\n\n  for (let i = 1; i < n; ++i) {\n    let key = prevRect[i].width;\n    let j = i - 1;\n\n    while (j >= 0 && prevRect[j].width > key) {\n      const recti = { ...prevRect[j]\n      };\n      const rectj = { ...prevRect[j + 1]\n      };\n      prevRect[j + 1] = recti;\n      prevRect[j] = rectj;\n      pairs.push({\n        xx: j,\n        yy: j + 1,\n        changed: true\n      });\n      j = j - 1;\n    } // arr[j + 1] = arr[i];\n\n  }\n\n  for (let i = 0; i < n; i++) {\n    pairs.push({\n      xx: i,\n      yy: i,\n      changed: true\n    });\n  }\n\n  return pairs;\n}","map":{"version":3,"names":["bubbleSort2","rects","pairs","num","length","prevRect","slice","i","j","width","recti","rectj","push","xx","yy","changed","selectionSort","arr","n","min_idx","bubbleSort","insertionSort","key"],"sources":["C:/Users/hp/Downloads/VizALgo-master/src/algorithms/sortingAlgorithms.js"],"sourcesContent":["export function bubbleSort2(rects ){\n    const pairs = [];\n    const num  = rects.length;\n    const prevRect = rects.slice();\n\n    for( let i = 0; i<num; i++ ){\n        for( let j = i+1;j<num;j++ ){\n            if( prevRect[i].width>prevRect[j].width ){\n                const recti = {...prevRect[i]};\n                const rectj = {...prevRect[j]};\n                prevRect[j] = recti;\n                prevRect[i] = rectj;\n                pairs.push( {\n                    xx:i,\n                    yy:j,\n                    changed:true\n                } );\n            } else{\n                pairs.push( {\n                    xx:i,\n                    yy:j,\n                    changed:false\n                });\n            }\n            if( j === num-1 ){\n                pairs.push( {\n                    xx:i,\n                    yy:i,\n                    changed:false\n                });\n            }\n        }\n    }\n    return pairs;\n}\n\nexport function selectionSort(arr) {\n    const pairs = [];\n    let n = arr.length;\n    const prevRect = arr.slice();\n    // One by one move boundary of unsorted subarray\n    for (let i = 0; i < n-1; i++)\n    {\n        let min_idx = i;\n        for (let j = i+1; j < n; j++){\n            pairs.push( {\n                xx:min_idx,\n                yy:j,\n                changed:false\n            } );\n            if (prevRect[j].width < prevRect[min_idx].width){\n                min_idx = j;\n            }\n        }\n\n        // Swap the found minimum element with the first\n        // element\n        const recti = {...prevRect[i]};\n        const rectj = {...prevRect[min_idx]};\n        prevRect[min_idx] = recti;\n        prevRect[i] = rectj;\n        pairs.push( {\n            xx:min_idx,\n            yy:i,\n            changed:true\n        } );\n        pairs.push( {\n            xx:i,\n            yy:i,\n            changed:false\n        });\n    }\n    pairs.push({\n            xx:n-1,\n            yy:n-1,\n            changed:false\n        }\n    )\n    return pairs;\n}\n\nexport function bubbleSort(arr){\n    const pairs= [];\n    let n = arr.length;\n    const prevRect = arr.slice();\n    for (let i = 0; i < n-1; i++){\n        for (let j = 0; j < n-i-1; j++){\n            if (prevRect[j].width > prevRect[j+1].width) {\n                // swap arr[j+1] and arr[j]\n                const recti = {...prevRect[j]};\n                const rectj = {...prevRect[j+1]};\n                prevRect[j+1] = recti;\n                prevRect[j] = rectj;\n                pairs.push( {\n                    xx:j,\n                    yy:j+1,\n                    changed:true\n                } );\n            } else{\n                pairs.push( {\n                    xx:j,\n                    yy:j+1,\n                    changed:false\n                } );\n            }\n            if( j === n-i-2 ){\n                pairs.push( {\n                    xx:n-i-1,\n                    yy:n-i-1,\n                    changed:false\n                } );\n            }\n        }\n    }\n    pairs.push({\n            xx:0,\n            yy:0,\n            changed:false\n        }\n    )\n    return pairs;\n}\n\nexport function insertionSort(arr){\n    const pairs = [];\n    let n = arr.length;\n    const prevRect = arr.slice();\n    for (let i = 1; i < n; ++i) {\n        let key = prevRect[i].width;\n        let j = i - 1;\n\n        while (j >= 0 && prevRect[j].width > key) {\n            const recti = {...prevRect[j]};\n            const rectj = {...prevRect[j+1]};\n            prevRect[j+1] = recti;\n            prevRect[j] = rectj;\n            pairs.push( {\n                xx:j,\n                yy:j+1,\n                changed:true\n            } );\n            j = j - 1;\n        }\n       // arr[j + 1] = arr[i];\n    }\n    for(let i=0;i<n;i++){\n        pairs.push({\n            xx:i,\n            yy:i,\n            changed:true\n        })\n    }\n    return pairs;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}